package average;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

public class TradingStatisticsCalHelper {
	public static Date getMorningTradingOpenTime(Date time) {
		Calendar openTime = Calendar.getInstance();
		openTime.setTime(time);

		openTime.set(Calendar.HOUR_OF_DAY, 9);

		openTime.set(Calendar.MINUTE, 30);

		openTime.set(Calendar.SECOND, 0);

		return openTime.getTime();
	}

	public static Date getMorningTradingCloseTime(Date time) {
		Calendar closeTime = Calendar.getInstance();
		closeTime.setTime(time);

		closeTime.set(Calendar.HOUR_OF_DAY, 11);

		closeTime.set(Calendar.MINUTE, 30);

		closeTime.set(Calendar.SECOND, 0);

		return closeTime.getTime();
	}

	public static Date getAfternoonTradingOpenTime(Date time) {
		Calendar openTime = Calendar.getInstance();
		openTime.setTime(time);

		openTime.set(Calendar.HOUR_OF_DAY, 13);

		openTime.set(Calendar.MINUTE, 0);

		openTime.set(Calendar.SECOND, 0);

		return openTime.getTime();
	}

	public static Date getAfternoonTradingCloseTime(Date time) {
		Calendar closeTime = Calendar.getInstance();
		closeTime.setTime(time);

		closeTime.set(Calendar.HOUR_OF_DAY, 15);

		closeTime.set(Calendar.MINUTE, 0);

		closeTime.set(Calendar.SECOND, 0);

		return closeTime.getTime();
	}

	public static List<TradingStatisticsData> calBasedOnMinutes(List<TradingData> dataList, final long calStep) {
		List<TradingStatisticsData> statisticsDataList = new ArrayList<TradingStatisticsData>();

		Date tmpTime = dataList.get(0).getTime();
		long mOpenTime = TradingStatisticsCalHelper.getMorningTradingOpenTime(tmpTime).getTime();
		long mCloseTime = TradingStatisticsCalHelper.getMorningTradingCloseTime(tmpTime).getTime();
		long aOpenTime = TradingStatisticsCalHelper.getAfternoonTradingOpenTime(tmpTime).getTime();
		long aCloseTime = TradingStatisticsCalHelper.getAfternoonTradingCloseTime(tmpTime).getTime();

		long sliceEndTime = mOpenTime + calStep;

		TradingStatisticsData statisticsData = null;
		for (TradingData data : dataList) {
			long tradingTime = data.getTime().getTime();
			if (tradingTime <= sliceEndTime) {
				if (null == statisticsData) {
					statisticsData = new TradingStatisticsData();

					statisticsData.setAmount(data.getAmount());
					statisticsData.setHighestPrice(data.getPrice());
					statisticsData.setLowestPrice(data.getPrice());
					statisticsData.setOpenPrice(data.getPrice());
					statisticsData.setClosePrice(data.getPrice());
					Calendar calendar = Calendar.getInstance();
					calendar.setTimeInMillis(sliceEndTime);
					statisticsData.setTime(calendar.getTime());
					statisticsData.setVolume(data.getVolume());
				} else {
					statisticsData.setClosePrice(data.getPrice());
					statisticsData.setAmount(statisticsData.getAmount().add(data.getAmount()));
					statisticsData.setVolume(statisticsData.getVolume() + data.getVolume());

					if (statisticsData.getHighestPrice().compareTo(data.getPrice()) < 0) {
						statisticsData.setHighestPrice(data.getPrice());
					}

					if (statisticsData.getLowestPrice().compareTo(data.getPrice()) > 0) {
						statisticsData.setLowestPrice(data.getPrice());
					}
				}
			} else {
				if ((tradingTime > mCloseTime && tradingTime < aOpenTime)) {
					sliceEndTime = mCloseTime - 1000 * 60 * 15;

					statisticsData.setClosePrice(data.getPrice());
					statisticsData.setAmount(statisticsData.getAmount().add(data.getAmount()));
					statisticsData.setVolume(statisticsData.getVolume() + data.getVolume());

					if (statisticsData.getHighestPrice().compareTo(data.getPrice()) < 0) {
						statisticsData.setHighestPrice(data.getPrice());
					}

					if (statisticsData.getLowestPrice().compareTo(data.getPrice()) > 0) {
						statisticsData.setLowestPrice(data.getPrice());
					}
				} else if (tradingTime > aCloseTime) {
					sliceEndTime = aCloseTime + 1000 * 60 * 15;

					statisticsData.setClosePrice(data.getPrice());
					statisticsData.setAmount(statisticsData.getAmount().add(data.getAmount()));
					statisticsData.setVolume(statisticsData.getVolume() + data.getVolume());

					if (statisticsData.getHighestPrice().compareTo(data.getPrice()) < 0) {
						statisticsData.setHighestPrice(data.getPrice());
					}

					if (statisticsData.getLowestPrice().compareTo(data.getPrice()) > 0) {
						statisticsData.setLowestPrice(data.getPrice());
					}
				} else {
					statisticsData.setAveragePrice(statisticsData.getAmount().divide(
							BigDecimal.valueOf(statisticsData.getVolume()), RoundingMode.UP));
					statisticsDataList.add(statisticsData);

					sliceEndTime += calStep;
					statisticsData = new TradingStatisticsData();
					statisticsData.setAmount(data.getAmount());
					statisticsData.setHighestPrice(data.getPrice());
					statisticsData.setLowestPrice(data.getPrice());
					statisticsData.setOpenPrice(data.getPrice());
					statisticsData.setClosePrice(data.getPrice());
					Calendar calendar = Calendar.getInstance();
					calendar.setTimeInMillis(sliceEndTime);
					statisticsData.setTime(calendar.getTime());
					statisticsData.setVolume(data.getVolume());
				}
			}
		}

		statisticsData.setAveragePrice(statisticsData.getAmount().divide(
				BigDecimal.valueOf(statisticsData.getVolume()), RoundingMode.UP));
		statisticsDataList.add(statisticsData);

		return statisticsDataList;
	}
}
