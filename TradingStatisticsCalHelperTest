package average;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.junit.Test;

import com.taobao.metamorphosis.utils.JSONUtils;

public class TradingStatisticsCalHelperTest {

	@Test
	public void getMorningTradingOpenTimeTest() {
		System.out.println(TradingStatisticsCalHelper.getMorningTradingOpenTime(new Date()));
	}

	@Test
	public void getMorningTradingCloseTimeTest() {
		System.out.println(TradingStatisticsCalHelper.getMorningTradingCloseTime(new Date()));
	}

	@Test
	public void getAfternoonTradingOpenTimeTest() {
		System.out.println(TradingStatisticsCalHelper.getAfternoonTradingOpenTime(new Date()));
	}

	@Test
	public void getAfternoonTradingCloseTimeTest() {
		System.out.println(TradingStatisticsCalHelper.getAfternoonTradingCloseTime(new Date()));
	}

	@Test
	public void calBasedOnMinutesTest() {
		List<TradingData> dataList = new ArrayList<TradingData>();

		Date startTime = TradingStatisticsCalHelper.getMorningTradingOpenTime(new Date());
		Date mCloseTime = TradingStatisticsCalHelper.getMorningTradingCloseTime(new Date());
		Date aOpenTime = TradingStatisticsCalHelper.getAfternoonTradingOpenTime(new Date());
		Date aCloseTime = TradingStatisticsCalHelper.getAfternoonTradingCloseTime(new Date());

		double[] priceArray = { 2.55, 1.75, 3.56, 2.34, 3.66, 3.12, 3.22, 2.75, 2.65, 2.34, 2.56, 2.21, 1.78, 1.88 };
		Random random = new Random();
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(startTime.getTime() - 1000 * 5);
		TradingData data = new TradingData();
		data.setTime(cal.getTime());
		data.setPrice(BigDecimal.valueOf(2.55));
		data.setVolume(1000);
		data.setAmount(BigDecimal.valueOf(2550.00));
		dataList.add(data);

		while (true) {
			data = new TradingData();
			data.setTime(cal.getTime());
			data.setPrice(BigDecimal.valueOf(priceArray[random.nextInt(priceArray.length)]));
			data.setVolume(1000);
			data.setAmount(data.getPrice().multiply(BigDecimal.valueOf(data.getVolume())));

			dataList.add(data);

			if (cal.getTimeInMillis() > mCloseTime.getTime() && cal.getTimeInMillis() < aOpenTime.getTime()) {
				cal.setTime(aOpenTime);
			} else if (cal.getTimeInMillis() > aCloseTime.getTime()) {
				break;
			}
			cal.setTimeInMillis(cal.getTimeInMillis() + 1000 * 23);
		}

		for (TradingStatisticsData _data : TradingStatisticsCalHelper.calBasedOnMinutes(dataList, 1000 * 60)) {
			try {
				System.out.println(JSONUtils.serializeObject(_data));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	@Test
	public void macdCalTest() {
		List<TradingData> dataList = new ArrayList<TradingData>();

		Date startTime = TradingStatisticsCalHelper.getMorningTradingOpenTime(new Date());
		Date mCloseTime = TradingStatisticsCalHelper.getMorningTradingCloseTime(new Date());
		Date aOpenTime = TradingStatisticsCalHelper.getAfternoonTradingOpenTime(new Date());
		Date aCloseTime = TradingStatisticsCalHelper.getAfternoonTradingCloseTime(new Date());

		double[] priceArray = { 2.55, 1.75, 3.56, 2.34, 3.66, 3.12, 3.22, 2.75, 2.65, 2.34, 2.56, 2.21, 1.78, 1.88 };
		Random random = new Random();
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(startTime.getTime() - 1000 * 5);
		TradingData data = new TradingData();
		data.setTime(cal.getTime());
		data.setPrice(BigDecimal.valueOf(2.55));
		data.setVolume(1000);
		data.setAmount(BigDecimal.valueOf(2550.00));
		dataList.add(data);

		while (true) {
			data = new TradingData();
			data.setTime(cal.getTime());
			data.setPrice(BigDecimal.valueOf(priceArray[random.nextInt(priceArray.length)]));
			data.setVolume(1000);
			data.setAmount(data.getPrice().multiply(BigDecimal.valueOf(data.getVolume())));

			dataList.add(data);

			if (cal.getTimeInMillis() > mCloseTime.getTime() && cal.getTimeInMillis() < aOpenTime.getTime()) {
				cal.setTime(aOpenTime);
			} else if (cal.getTimeInMillis() > aCloseTime.getTime()) {
				break;
			}
			cal.setTimeInMillis(cal.getTimeInMillis() + 1000 * 23);
		}

		for (AverageData _data : AverageCalHelper.macdCal(
				TradingStatisticsCalHelper.calBasedOnMinutes(dataList, 1000 * 60), 5)) {
			try {
				System.out.println(JSONUtils.serializeObject(_data));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}
}
